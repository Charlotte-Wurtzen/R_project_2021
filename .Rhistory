runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
runApp('R/Golub_App')
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
golub_clean_aug <- read_tsv(file = "data/03_golub_clean_aug.tsv.gz")
# Wrangle data ------------------------------------------------------------
# Pivot longer
golub_long <- longer(golub_clean_aug)
# Grouping and nesting
golub_long_nested <- groupnest(golub_long, gene)
# Modeling ------------------------------------------------------------
# Fit logistic model on gene
golub_model <- golub_long_nested %>%
mutate(mdl = map(data, ~glm(type ~ norm_expr_level,
data = .x,
family = binomial(link = "logit"))))
View(golub_model)
# Add model information
golub_model <- golub_model %>%
mutate(mdl_tidy = map(mdl, ~tidy(.x, conf.int = TRUE))) %>%
unnest(mdl_tidy)
runApp('R/Golub_App')
runApp('R/Golub_App')
# Run all scripts
source(file = "R/01_load.R")
source(file = "R/02_clean.R")
source(file = "R/03_augment.R")
source(file = "R/04_analysis_statistics.R")
source(file = "R/05_analysis_PCA.R")
source(file = "R/06_analysis_heatmap.R")
source(file = "R/07_analysis_plots.R")
# call to knitr
# Run all scripts
source(file = "R/01_load.R")
source(file = "R/02_clean.R")
source(file = "R/03_augment.R")
source(file = "R/04_analysis_statistics.R")
source(file = "R/05_analysis_PCA.R")
source(file = "R/06_analysis_heatmap.R")
source(file = "R/07_analysis_plots.R")
# call to knitr
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
# Load data ---------------------------------------------------------------
load(file = "data/_raw/golub.RData")
# Wrangle data ------------------------------------------------------------
x_data <- golub %>%
pluck("x") %>%
as_tibble()
y_data <- golub %>%
pluck("y") %>%
as_tibble()
# Write data --------------------------------------------------------------
write_tsv(x = x_data,
path = "data/golub_x.tsv.gz")
write_tsv(x = y_data,
path = "data/golub_y.tsv.gz")
View(golub)
rmarkdown::render("project/doc/slideEmma.Rmd")
rmarkdown::render("/doc/slideEmma.Rmd")
rmarkdown::render("/Cloud/project/doc/slideEmma.Rmd")
rmarkdown::render("/cloud/project/doc/slideEmma.Rmd")
rmarkdown::render("/cloud/project/doc/slideEmma.Rmd")
knitr::knit2hmtl("/cloud/project/doc/slideEmma.Rmd")
knit2hmtl("/cloud/project/doc/slideEmma.Rmd")
library(knitr)
knit2hmtl("/cloud/project/doc/slideEmma.Rmd")
library(markdown)
knit2hmtl("/cloud/project/doc/slideEmma.Rmd")
library(rmarkdown)
render("/cloud/project/doc/slideEmma.Rmd")
knitr::knit("/cloud/project/doc/slideEmma.Rmd")
knitr::knit(input = "/cloud/project/doc/slideEmma.Rmd",
output = "cloud/project/doc/slideEmma.html")
knitr::knit(input = "/cloud/project/doc/slideEmma.Rmd",
output = "/cloud/project/doc/slideEmma.html")
rmarkdown::render("/cloud/project/doc/slideEmma.Rmd")
knitr::knit(input = "/cloud/project/doc/slideEmma.Rmd",
output = "/cloud/project/doc/slideEmma.html")
rmarkdown::render("/cloud/project/doc/slideEmma.Rmd")
knitr::knit(input = "/cloud/project/doc/slideEmma.Rmd",
output = "/cloud/project/doc/slideEmma.html")
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
library("cowplot")
library("patchwork")
# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
golub_clean_aug <- read_tsv(file = "data/03_golub_clean_aug.tsv.gz")
golub_top_genes <- read_tsv(file = "data/04_top_genes.tsv.gz")
# Wrangle data ------------------------------------------------------------
# Extract most significant genes
top_gene_names = golub_top_genes %>%
groupnest(gene) %>%
head(n = 10L) %>%
select(-data)
# Model data
pca_fit <- golub_clean_aug %>%
select(where(is.numeric),
-c(type, id)) %>%
prcomp(scale = TRUE)
pca_aug <- pca_fit %>%
augment(golub_clean_aug)
# Visualise data ----------------------------------------------------------
# Scatter plot, variance for patients
plot1 <- pca_aug %>%
ggplot(aes(.fittedPC1, .fittedPC2,
color = factor(type))) +
geom_point(size = 1.5) +
labs(color = "Type",
title = "Projection of patients unto PC1 and PC2",
caption = "Data from Golub et al. (1999)") +
xlab(label = "Principal Component 1") +
ylab(label = "Principal Component 2") +
theme_bw()
# Rotation matrix, variance for genes
arrow_style <- arrow(
angle = 20,
ends = "first",
type = "closed",
length = grid::unit(8, "pt")
)
plot2 <- pca_fit %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC",
names_prefix = "PC",
values_from = "value") %>%
filter(column %in% pull(top_gene_names)) %>%
ggplot(aes(PC1, PC2)) +
geom_segment(xend = 0,
yend = 0,
arrow = arrow_style) +
geom_text(aes(label = column),
hjust = 0.5,
nudge_x = -0.0009,
color = "#904C2F",
size = 3) +
labs(color = "Type",
title = "Projection of gene expressions unto PC1 and PC2",
caption = "Data from Golub et al. (1999)") +
theme_bw()
# Plot of variance explained
plot3 <- pca_fit %>%
tidy(matrix = "eigenvalues") %>%
head(.,10) %>%
ggplot(aes(PC, percent)) +
geom_col(fill = "#56B4E9",
alpha = 0.8) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(
labels = scales::percent_format(),
expand = expansion(mult = c(0, 0.01))) +
labs(title = "Variance explained by the principal components",
caption = "Data from Golub et al. (1999)") +
ylab(label = "Percent") +
theme_minimal_hgrid(12)
# Kmeans analysis ------------------------------------------------------------
# Kmeans clustering based on gene expressions
k_type <- golub_clean_aug %>%
select(-c(type,
value,
id)) %>%
kmeans(centers = 2)
pca_aug_k_type <- k_type %>%
augment(pca_aug) %>%
rename(cluster_type = .cluster)
# Kmeans clustering based on principal components
k_pca <- pca_aug_k_type %>%
select(.fittedPC1,
.fittedPC2) %>%
kmeans(centers = 2)
pca_aug_k_type_pca <- k_pca %>%
augment(pca_aug_k_type) %>%
rename(cluster_pca = .cluster)
# Plot type + clustering based on type and pca
p1 <- pca_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(type))) +
geom_point() +
ylab(label = "Principal Component 2") +
xlab(label = "Principal Component 1") +
labs(color = "Cancer type") +
theme(legend.position = "bottom")
p2 <- pca_aug_k_type_pca %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_type)) +
geom_point() +
xlab(label = "Principal Component 1") +
labs(color = "Gene cluster") +
theme(legend.position = "bottom", axis.title.y=element_blank())
p3 <- pca_aug_k_type_pca %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_pca)) +
geom_point() +
xlab(label = "Principal Component 1") +
labs(color = "PCA cluster") +
theme(legend.position = "bottom",
axis.title.y=element_blank())
kmeans_plot <- p1 + p2 + p3 +
plot_annotation(title = "K-means analysis",
caption = "Data from Golub et al. (1999)")
# Write data --------------------------------------------------------------
ggsave("results/05_PCA_plot1.png",
plot = plot1)
ggsave("results/05_PCA_plot2.png",
plot = plot2)
ggsave("results/05_PCA_plot3.png",
plot = plot3)
ggsave("results/05_kmeans_plot.png",
plot = kmeans_plot)
# Plot of variance explained
plot3 <- pca_fit %>%
tidy(matrix = "eigenvalues") %>%
head(.,10) %>%
ggplot(aes(PC, percent)) +
geom_col(fill = "#56B4E9",
alpha = 0.8) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(
labels = scales::percent_format(),
expand = expansion(mult = c(0, 0.01))) +
labs(title = "Variance explained by the principal components",
caption = "Data from Golub et al. (1999)") +
ylab(label = "Percent")
plot3
plot3 <- pca_fit %>%
tidy(matrix = "eigenvalues") %>%
head(.,10) %>%
ggplot(aes(PC, percent)) +
geom_col(fill = "#56B4E9",
alpha = 0.8) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(
labels = scales::percent_format(),
expand = expansion(mult = c(0, 0.01))) +
labs(title = "Variance explained by the principal components",
caption = "Data from Golub et al. (1999)") +
ylab(label = "Percent") +
theme_minimal_hgrid(12)
plot3
plot2 <- pca_fit %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC",
names_prefix = "PC",
values_from = "value") %>%
filter(column %in% pull(top_gene_names)) %>%
ggplot(aes(PC1, PC2)) +
geom_segment(xend = 0,
yend = 0,
arrow = arrow_style) +
geom_text(aes(label = column),
hjust = 0.5,
nudge_x = -0.0009,
color = "#904C2F",
size = 3) +
labs(color = "Type",
title = "Projection of gene expressions unto PC1 and PC2",
caption = "Data from Golub et al. (1999)") +
theme_bw() +
theme(plot.title = element_text(face = "bold"))
plot2
# Clear workspace ---------------------------------------------------------
rm(list = ls())
# Load libraries ----------------------------------------------------------
library("tidyverse")
library("cowplot")
library("patchwork")
# Define functions --------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
golub_clean_aug <- read_tsv(file = "data/03_golub_clean_aug.tsv.gz")
golub_top_genes <- read_tsv(file = "data/04_top_genes.tsv.gz")
# Wrangle data ------------------------------------------------------------
# Extract most significant genes
top_gene_names = golub_top_genes %>%
groupnest(gene) %>%
head(n = 10L) %>%
select(-data)
# Model data
pca_fit <- golub_clean_aug %>%
select(where(is.numeric),
-c(type, id)) %>%
prcomp(scale = TRUE)
pca_aug <- pca_fit %>%
augment(golub_clean_aug)
# Visualise data ----------------------------------------------------------
# Scatter plot, variance for patients
plot1 <- pca_aug %>%
ggplot(aes(.fittedPC1, .fittedPC2,
color = factor(type))) +
geom_point(size = 1.5) +
labs(color = "Type",
title = "Projection of patients unto PC1 and PC2",
caption = "Data from Golub et al. (1999)") +
xlab(label = "Principal Component 1") +
ylab(label = "Principal Component 2") +
theme_bw()
# Rotation matrix, variance for genes
arrow_style <- arrow(
angle = 20,
ends = "first",
type = "closed",
length = grid::unit(8, "pt")
)
plot2 <- pca_fit %>%
tidy(matrix = "rotation") %>%
pivot_wider(names_from = "PC",
names_prefix = "PC",
values_from = "value") %>%
filter(column %in% pull(top_gene_names)) %>%
ggplot(aes(PC1, PC2)) +
geom_segment(xend = 0,
yend = 0,
arrow = arrow_style) +
geom_text(aes(label = column),
hjust = 0.5,
nudge_x = -0.0009,
color = "#904C2F",
size = 3) +
labs(color = "Type",
title = "Projection of gene expressions unto PC1 and PC2",
caption = "Data from Golub et al. (1999)") +
theme_bw() +
theme(plot.title = element_text(face = "bold"))
# Plot of variance explained
plot3 <- pca_fit %>%
tidy(matrix = "eigenvalues") %>%
head(.,10) %>%
ggplot(aes(PC, percent)) +
geom_col(fill = "#56B4E9",
alpha = 0.8) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(
labels = scales::percent_format(),
expand = expansion(mult = c(0, 0.01))) +
labs(title = "Variance explained by the principal components",
caption = "Data from Golub et al. (1999)") +
ylab(label = "Percent") +
theme_minimal_hgrid(12)
# Kmeans analysis ------------------------------------------------------------
# Kmeans clustering based on gene expressions
k_type <- golub_clean_aug %>%
select(-c(type,
value,
id)) %>%
kmeans(centers = 2)
pca_aug_k_type <- k_type %>%
augment(pca_aug) %>%
rename(cluster_type = .cluster)
# Kmeans clustering based on principal components
k_pca <- pca_aug_k_type %>%
select(.fittedPC1,
.fittedPC2) %>%
kmeans(centers = 2)
pca_aug_k_type_pca <- k_pca %>%
augment(pca_aug_k_type) %>%
rename(cluster_pca = .cluster)
# Plot type + clustering based on type and pca
p1 <- pca_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(type))) +
geom_point() +
ylab(label = "Principal Component 2") +
xlab(label = "Principal Component 1") +
labs(color = "Cancer type") +
theme(legend.position = "bottom")
p2 <- pca_aug_k_type_pca %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_type)) +
geom_point() +
xlab(label = "Principal Component 1") +
labs(color = "Gene cluster") +
theme(legend.position = "bottom", axis.title.y=element_blank())
p3 <- pca_aug_k_type_pca %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_pca)) +
geom_point() +
xlab(label = "Principal Component 1") +
labs(color = "PCA cluster") +
theme(legend.position = "bottom",
axis.title.y=element_blank())
kmeans_plot <- p1 + p2 + p3 +
plot_annotation(title = "K-means analysis",
caption = "Data from Golub et al. (1999)")
# Write data --------------------------------------------------------------
ggsave("results/05_PCA_plot1.png",
plot = plot1)
ggsave("results/05_PCA_plot2.png",
plot = plot2)
ggsave("results/05_PCA_plot3.png",
plot = plot3)
ggsave("results/05_kmeans_plot.png",
plot = kmeans_plot)
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html")
rmarkdown::render("/cloud/project/doc/slideEmma.Rmd")
rmarkdown::render("/cloud/project/doc/presentation.Rmd")
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html")
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new_env())
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env())
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env())
install.packages(c("cli", "colorspace", "curl", "dplyr", "ellipsis", "haven", "httpuv", "knitr", "openssl", "processx", "rlang", "rmarkdown", "stringi", "tidyselect", "vctrs"))
install.packages(c("cli", "colorspace", "curl", "dplyr", "ellipsis", "haven", "httpuv", "knitr", "openssl", "processx", "rlang", "rmarkdown", "stringi", "tidyselect", "vctrs"))
install.packages(c("cli", "colorspace", "curl", "dplyr", "ellipsis", "haven", "httpuv", "knitr", "openssl", "processx", "rlang", "rmarkdown", "stringi", "tidyselect", "vctrs"))
rm(list = ls())
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env())
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env())
knitr::knit(input = "/cloud/project/doc/presentation.Rmd")
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env(parent = globalenv()),
output_format = "ioslides_presentation")
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env(parent = globalenv()),
encoding = 'utf-8')
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = new.env(parent = globalenv()),
encoding = "utf-8")
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = "/cloud/project/doc/presentation.html",
envir = parent.frame(),
encoding = "utf-8",
quiet = FALSE)
knitr::knit(input = basename("/cloud/project/doc/presentation.Rmd"),
output = "/cloud/project/doc/presentation.html",
envir = parent.frame(),
encoding = "utf-8",
quiet = FALSE)
input <- basename("/cloud/project/doc/presentation.Rmd")
knitr::knit(input = input,
output = "/cloud/project/doc/presentation.html",
envir = parent.frame(),
encoding = "utf-8",
quiet = FALSE)
knit_output <- intermediates_loc(
file_with_meta_ext("presentation.Rmd", "knit", getOption("rmarkdown.knit.ext", "md"))
)
knit_output <- file_with_meta_ext("presentation.Rmd", "knit", getOption("rmarkdown.knit.ext", "md"))
file_with_meta_ext <- function(file, meta_ext, ext = tools::file_ext(file)) {
paste(tools::file_path_sans_ext(file),
".", meta_ext, ".", ext,
sep = ""
)
}
knit_output <- file_with_meta_ext("presentation.Rmd", "knit", getOption("rmarkdown.knit.ext", "md"))
knitr::knit(input = "/cloud/project/doc/presentation.Rmd",
output = knit_output,
envir = parent.frame(),
encoding = "utf-8",
quiet = FALSE)
rmarkdown::render("/cloud/project/doc/presentation.Rmd")
rmarkdown::render("/cloud/project/doc/presentation.Rmd")
